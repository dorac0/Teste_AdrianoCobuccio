--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--2. Stored Procedure no SQL Server:
--   - Crie uma stored procedure que calcule o total de transações para um dado período, agrupado por Numero_Cartao.
--   - A procedure deve receber dois parâmetros: Data_Inicial e Data_Final.
--   - Retorne o Numero_Cartao, o total de transações (Valor_Total) e a quantidade de transações (Quantidade_Transacoes) para cada cartão no período.

--3. Function no SQL Server:
--     - Crie uma função que receba um valor e retorne a categoria da transação:
--     - Se Valor_Transacao for maior que 1000, a categoria é "Alta".
--     - Se Valor_Transacao estiver entre 500 e 1000, a categoria é "Média".
--     - Se Valor_Transacao for menor que 500, a categoria é "Baixa".
--     - Utilize essa função em uma consulta para categorizar todas as transações existentes.

--4. View no SQL Server:
--     - Crie uma view que combine informações das tabelas Transacoes e Clientes.
--     - A view deve retornar o Nome_Cliente, Numero_Cartao, Valor_Transacao, Data_Transacao e a categoria da transação utilizando a função criada anteriormente.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Stored Procedure no SQL Server:

CREATE TABLE Transacoes (
    Id_Transacao NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Numero_Cartao VARCHAR2(20) NOT NULL,
    Valor_Transacao DECIMAL(10, 2) NOT NULL,
    Data_Transacao DATE NOT NULL,
    Descricao VARCHAR2(255)
);


INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('9876-5432-1098-7654', 750.50, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 'Pagamento de conta de luz');
INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('3333-4444-5555-6666', 100.00, TO_DATE('2024-06-25', 'YYYY-MM-DD'), 'Restaurante');
INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('6666-7777-8888-9999', 450.99, TO_DATE('2024-09-10', 'YYYY-MM-DD'), 'Pagamento de serviço de internet');
INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('7777-8888-9999-0000', 85.00,  TO_DATE('2024-10-01', 'YYYY-MM-DD'), 'Café com amigos');
INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('1234-5678-9012-3456', 125.00, TO_DATE('2024-10-01', 'YYYY-MM-DD'), 'Produtos de limpeza');
INSERT INTO Transacoes (Numero_Cartao, Valor_Transacao, Data_Transacao, Descricao) VALUES
('1234-5678-9012-3456', 400.00, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 'Compra em loja de eletrônicos');


SELECT COUNT(*) AS total_registros FROM Transacoes;
SELECT * FROM Transacoes;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Function no SQL Server:

CREATE PROCEDURE TotalTransacoesPorCartao (p_Data_Inicial IN DATE, p_Data_Final IN DATE) AS 

BEGIN
    FOR rec IN (
    SELECT Numero_Cartao, SUM(Valor_Transacao) AS Valor_Total, COUNT(*) AS Quantidade_Transacoes
    FROM Transacoes
    WHERE Data_Transacao BETWEEN p_Data_Inicial AND p_Data_Final
    GROUP BY Numero_Cartao
    ) LOOP
        -- Exibir os resultados
        DBMS_OUTPUT.PUT_LINE('Numero_Cartao: ' || rec.Numero_Cartao || 
                             ', Valor_Total: ' || rec.Valor_Total || 
                             ', Quantidade_Transacoes: ' || rec.Quantidade_Transacoes);
    END LOOP;
END TotalTransacoesPorCartao;

BEGIN 
    TotalTransacoesPorCartao(TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-10-15', 'YYYY-MM-DD'));
END;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE FUNCTION CategoriaTransacao (p_Valor_Transacao IN DECIMAL) RETURN VARCHAR2 AS

BEGIN
    IF p_Valor_Transacao > 1000 THEN
        RETURN 'Alta';
    ELSIF p_Valor_Transacao >= 500 AND p_Valor_Transacao <= 1000 THEN
        RETURN 'Média';
    ELSE
        RETURN 'Baixa';
    END IF;
    
END CategoriaTransacao;

SELECT Numero_Cartao, Valor_Transacao, Data_Transacao, CategoriaTransacao(Valor_Transacao) AS Categoria
FROM Transacoes;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- View no SQL Server:

CREATE TABLE Clientes (
    Id_Cliente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nome_Cliente VARCHAR2(100) NOT NULL,
    Numero_Cartao VARCHAR2(20) NOT NULL
);


INSERT INTO Clientes (Nome_Cliente, Numero_Cartao) VALUES ('Juliana Rocha', '6666-7777-8888-9999');
INSERT INTO Clientes (Nome_Cliente, Numero_Cartao) VALUES ('Carlos Souza', '1111-2222-3333-4444');
INSERT INTO Clientes (Nome_Cliente, Numero_Cartao) VALUES ('Luan Pereira', '1234-5678-9012-3456');

SELECT * FROM Clientes;

CREATE VIEW V_TransacoesClientes AS
SELECT c.Nome_Cliente, t.Numero_Cartao, t.Valor_Transacao, t.Data_Transacao, CategoriaTransacao(t.Valor_Transacao) AS Categoria
FROM Transacoes t
JOIN Clientes c ON t.Numero_Cartao = c.Numero_Cartao;


SELECT * FROM V_TransacoesClientes;

COMMIT;